count <- 0
for (X in rnorm(N)) {
if (-1 <= X <= 1) {
sum <- sum + X
count <- count + 1
}
}
MX <- sum / count
MX
rm(list=ls())
# law of large numbers:
# The mean of observed/measured value Xbar from n samples approaches
# the expected/theoretical value of X (E(X)) as n approaches infinity
# normal distribution
# curve over mean of 0 with std-dev of 1
# ~34.1% from 0 to 1 (and -1 to 0)
# ~13.6% from 1 to 2 (and -2 to -1)
# ~2.1% from 2 to 3 (and -3 to -2)
# ~0.1% beyond 3 (and beyond -3)
# Exercise: Test LLN for N random normally distributed numbers with mean = 0, stdev = 1
# Create an R script that will count how many of these numbers fall between -1 and 1, dividing by total N
# Known: E(X) = 68.2% for -1 > XbarN > 1
# Check that Mean of X for N approaches E(X) as script runs while increasing N
ex <- 68.2
n <- 10
sum <- 0
count <- 0
for (x in rnorm(n)) {
if (-1 <= x  & x <= 1) {
sum <- sum + x
count <- count + 1
}
}
mean <- sum / count
mean
rm(list=ls())
# law of large numbers:
# The mean of observed/measured value Xbar from n samples approaches
# the expected/theoretical value of X (E(X)) as n approaches infinity
# normal distribution
# curve over mean of 0 with std-dev of 1
# ~34.1% from 0 to 1 (and -1 to 0)
# ~13.6% from 1 to 2 (and -2 to -1)
# ~2.1% from 2 to 3 (and -3 to -2)
# ~0.1% beyond 3 (and beyond -3)
# Exercise: Test LLN for N random normally distributed numbers with mean = 0, stdev = 1
# Create an R script that will count how many of these numbers fall between -1 and 1, dividing by total N
# Known: E(X) = 68.2% for -1 > XbarN > 1
# Check that Mean of X for N approaches E(X) as script runs while increasing N
ex <- 68.2
n <- 10
count <- 0
for (x in rnorm(n)) {
if (-1 <= x  & x <= 1) {
count <- count + 1
}
}
percent <- count / n
percent
rm(list=ls())
# law of large numbers:
# The mean of observed/measured value Xbar from n samples approaches
# the expected/theoretical value of X (E(X)) as n approaches infinity
# normal distribution
# curve over mean of 0 with std-dev of 1
# ~34.1% from 0 to 1 (and -1 to 0)
# ~13.6% from 1 to 2 (and -2 to -1)
# ~2.1% from 2 to 3 (and -3 to -2)
# ~0.1% beyond 3 (and beyond -3)
# Exercise: Test LLN for N random normally distributed numbers with mean = 0, stdev = 1
# Create an R script that will count how many of these numbers fall between -1 and 1, dividing by total N
# Known: E(X) = 68.2% for -1 > XbarN > 1
# Check that Mean of X for N approaches E(X) as script runs while increasing N
ex <- 68.2
n <- 100
count <- 0
for (x in rnorm(n)) {
if (-1 <= x  & x <= 1) {
count <- count + 1
}
}
percent <- count / n
percent
rm(list=ls())
# law of large numbers:
# The mean of observed/measured value Xbar from n samples approaches
# the expected/theoretical value of X (E(X)) as n approaches infinity
# normal distribution
# curve over mean of 0 with std-dev of 1
# ~34.1% from 0 to 1 (and -1 to 0)
# ~13.6% from 1 to 2 (and -2 to -1)
# ~2.1% from 2 to 3 (and -3 to -2)
# ~0.1% beyond 3 (and beyond -3)
# Exercise: Test LLN for N random normally distributed numbers with mean = 0, stdev = 1
# Create an R script that will count how many of these numbers fall between -1 and 1, dividing by total N
# Known: E(X) = 68.2% for -1 > XbarN > 1
# Check that Mean of X for N approaches E(X) as script runs while increasing N
ex <- 68.2
n <- 1000
count <- 0
for (x in rnorm(n)) {
if (-1 <= x  & x <= 1) {
count <- count + 1
}
}
percent <- count / n
percent
rm(list=ls())
# law of large numbers:
# The mean of observed/measured value Xbar from n samples approaches
# the expected/theoretical value of X (E(X)) as n approaches infinity
# normal distribution
# curve over mean of 0 with std-dev of 1
# ~34.1% from 0 to 1 (and -1 to 0)
# ~13.6% from 1 to 2 (and -2 to -1)
# ~2.1% from 2 to 3 (and -3 to -2)
# ~0.1% beyond 3 (and beyond -3)
# Exercise: Test LLN for N random normally distributed numbers with mean = 0, stdev = 1
# Create an R script that will count how many of these numbers fall between -1 and 1, dividing by total N
# Known: E(X) = 68.2% for -1 > XbarN > 1
# Check that Mean of X for N approaches E(X) as script runs while increasing N
ex <- 68.2
n <- 10000
count <- 0
for (x in rnorm(n)) {
if (-1 <= x  & x <= 1) {
count <- count + 1
}
}
percent <- count / n
percent
rm(list=ls())
# law of large numbers:
# The mean of observed/measured value Xbar from n samples approaches
# the expected/theoretical value of X (E(X)) as n approaches infinity
# normal distribution
# curve over mean of 0 with std-dev of 1
# ~34.1% from 0 to 1 (and -1 to 0)
# ~13.6% from 1 to 2 (and -2 to -1)
# ~2.1% from 2 to 3 (and -3 to -2)
# ~0.1% beyond 3 (and beyond -3)
# Exercise: Test LLN for N random normally distributed numbers with mean = 0, stdev = 1
# Create an R script that will count how many of these numbers fall between -1 and 1, dividing by total N
# Known: E(X) = 68.2% for -1 > XbarN > 1
# Check that Mean of X for N approaches E(X) as script runs while increasing N
ex <- 68.2
n <- 100000
count <- 0
for (x in rnorm(n)) {
if (-1 <= x  & x <= 1) {
count <- count + 1
}
}
percent <- count / n
percent
rm(list=ls())
# law of large numbers:
# The mean of observed/measured value Xbar from n samples approaches
# the expected/theoretical value of X (E(X)) as n approaches infinity
# normal distribution
# curve over mean of 0 with std-dev of 1
# ~34.1% from 0 to 1 (and -1 to 0)
# ~13.6% from 1 to 2 (and -2 to -1)
# ~2.1% from 2 to 3 (and -3 to -2)
# ~0.1% beyond 3 (and beyond -3)
# Exercise: Test LLN for N random normally distributed numbers with mean = 0, stdev = 1
# Create an R script that will count how many of these numbers fall between -1 and 1, dividing by total N
# Known: E(X) = 68.2% for -1 > XbarN > 1
# Check that Mean of X for N approaches E(X) as script runs while increasing N
ex <- 68.2
n <- 1000000
count <- 0
for (x in rnorm(n)) {
if (-1 <= x  & x <= 1) {
count <- count + 1
}
}
percent <- count / n
percent
rm(list=ls())
# law of large numbers:
# The mean of observed/measured value Xbar from n samples approaches
# the expected/theoretical value of X (E(X)) as n approaches infinity
# normal distribution
# curve over mean of 0 with std-dev of 1
# ~34.1% from 0 to 1 (and -1 to 0)
# ~13.6% from 1 to 2 (and -2 to -1)
# ~2.1% from 2 to 3 (and -3 to -2)
# ~0.1% beyond 3 (and beyond -3)
# Exercise: Test LLN for N random normally distributed numbers with mean = 0, stdev = 1
# Create an R script that will count how many of these numbers fall between -1 and 1, dividing by total N
# Known: E(X) = 68.2% for -1 > XbarN > 1
# Check that Mean of X for N approaches E(X) as script runs while increasing N
ex <- 68.2
n <- 10000000
count <- 0
for (x in rnorm(n)) {
if (-1 <= x  & x <= 1) {
count <- count + 1
}
}
percent <- count / n
percent
rm(list=ls())
MyFirstVector <- c(3, 45, 68, 732)
MyFirstVector
is.numeric(MyFirstVector)
is.integer(MyFirstVector)
is.double(MyFirstVector)
V2 <- c(3L, 12L, 10234L, 0L)
is.numeric(V2)
is.integer(V2)
is.double(V2)
v3 <- c("a", "b23", "hello")
v3
is.character(v3)
is.numeric(v3)
v4 <- c("b", "34", "yes", 7)
seq(1,15)
seq(1,15,2)
z <- seq(1,15,4)
z
rep(3, 50)
d <- rep(3, 50)
d
d <- rep(3, 500)
d
rep("a", 5)
x <- c(80, 20)
y <- rep(x, 10)
y
rm(list=ls())
w <- c("a", "b", "c", "d", "e")
w
w[2]
w[-1]
w[-3]
w[1:3]
w[3:5]
w[c(1, 3,5)]
w[c(-2,-4)]
w[-3:-5]
w[1:2]
rm(list=ls())
a <- c(50, 34, 111, 7, 24, 631, 20, 4, 7, 21)
b <- c(100, 2, 56, 12, 0, 65, 93, 10, 244, 1)
c <- a + b
c
d <- a > b
d
e <- c(2, 4, 5)
f <- c(1, 3, 6, 2, 8, 9)
g <- e + f
g
x <- rnorm(5)
rm(list=ls())
x <- rnorm(5)
for(i in x) {
print(i)
}
print(x[1])
print(x[2])
print(x[3])
print(x[4])
print(x[5])
N <- 100
a <- rnorm(N)
b <- rnorm(N)
c <- a * b
d <- rep(NA, N) # create empty vector with allocated memory
for (i in 1:N) {
d[i] <- a[i] * b[i]
}
rm(list=ls())
?rnorm()
rnorm(5)
rnorm(5, 10, 8)
rnorm(5, mean=10, sd=8)
rnorm(n=5, mean=10, sd=8)
rnorm(mean=10, n=5, sd=8)
rnorm(mean=100, n=5)
seq(from=10, to=20, by=3)
seq(from=10, to=20, length.out=100)
x <- c("a", "b", "c")
seq(from=10, to=20, along.with=x)
rep(5, 10)
rep(5:6, 10)
rep(5:6, each=10)
A <- seq(10, 20, 3)
A
A <- seq(10, 20, along.with=1:3)
A
sqrt(A)
qplot(data=diamonds, carat, price,
color=clarity, facets=.~clarity)
rm(list=ls())
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
taxRate <- 0.30
profit <- revenue - expenses
profit
taxes <- profit * taxRate
taxes
profitAfterTax <- profit - taxes
profitAfterTax
profitMargin <- profitAfterTax / revenue
profitMargin
?round
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
taxRate <- 0.30
profit <- revenue - expenses
profitThousands <- round(profit / 1000)
profitThousands
taxes <- profit * taxRate
taxesThousands <- round(taxes / 1000)
taxesThousands
profitAfterTax <- profit - taxes
profitAfterTaxThousands <- round(profitAfterTax / 1000)
profitAfterTaxThousands
profitMargin <- profitAfterTax / revenue
profitMarginPercent profitMargin * 100
profitMarginPercent
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
taxRate <- 0.30
profit <- revenue - expenses
profitThousands <- round(profit / 1000)
profitThousands
taxes <- profit * taxRate
taxesThousands <- round(taxes / 1000)
taxesThousands
profitAfterTax <- profit - taxes
profitAfterTaxThousands <- round(profitAfterTax / 1000)
profitAfterTaxThousands
profitMargin <- profitAfterTax / revenue
profitMarginPercent <- profitMargin * 100
profitMarginPercent
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
taxRate <- 0.30
profit <- revenue - expenses
profitThousands <- round(profit / 1000)
profitThousands
taxes <- profit * taxRate
taxesThousands <- round(taxes / 1000)
taxesThousands
profitAfterTax <- profit - taxes
profitAfterTaxThousands <- round(profitAfterTax / 1000)
profitAfterTaxThousands
profitMargin <- profitAfterTax / revenue
profitMarginPercent <- round(profitMargin * 100)
profitMarginPercent
meanProfit <-
?mean()
meanProfit <-
?mean
meanProfit <-
?average
meanProfit <-
?avg
?mean()
meanProfitAfterTax <- mean(profitAfterTax)
meanProfitAfterTax
goodMonths <- profitAfterTax > meanProfitAfterTax
goodMonths
badMonths <- profitAfterTax < meanProfitAfterTax
badMonths
?max
bestMonth <- max(profitAfterTax)
bestMonth
worstMonth <- min(profitAfterTax)
worstMonth
?round
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
taxRate <- 0.30
profit <- revenue - expenses
profitThousands <- round(profit / 1000, 0)
taxes <- round(profit * taxRate, 2)
taxes
profitAfterTax <- profit - taxes
profitAfterTaxThousands <- round(profitAfterTaxThousands / 1000, 0)
profitMargin <- round(profitAfterTax / revenue, 2)
profitMarginPercent <- profitMargin * 100
profitMarginPercent
meanProfitAfterTax <- mean(profitAfterTax)
meanProfitAfterTax
goodMonths <- profitAfterTax > meanProfitAfterTax
goodMonths
badMonths <- profitAfterTax < meanProfitAfterTax
badMonths
bestMonth <- profitAfterTax == max(profitAfterTax)
bestMonth
worstMonth <- profitAfterTax == min(profitAfterTax)
worstMonth
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
revenueThousands <- round(revenue / 1000, 0)
expensesThousands <- round(expenses / 1000, 0)
taxRate <- 0.30
profit <- revenue - expenses
profitThousands <- round(profit / 1000, 0)
taxes <- round(profit * taxRate, 2)
taxesThousands <- round(taxes / 1000, 0)
profitAfterTax <- profit - taxes
profitAfterTaxThousands <- round(profitAfterTaxThousands / 1000, 0)
profitMargin <- round(profitAfterTax / revenue, 2)
profitMarginPercent <- profitMargin * 100
profitMarginPercent
meanProfitAfterTax <- mean(profitAfterTax)
meanProfitAfterTax
goodMonths <- profitAfterTax > meanProfitAfterTax
goodMonths
badMonths <- !goodMonths
badMonths
bestMonth <- profitAfterTax == max(profitAfterTax)
bestMonth
worstMonth <- profitAfterTax == min(profitAfterTax)
worstMonth
m <- rbind(
revenueThousands,
expensesThousands,
profitThousands,
profitAfterTaxThousands,
profitMarginPercent,
goodMonths,
badMonths,
bestMonth,
worstMonth
)
m
rm(list=ls())
rm(list=ls())
setwd("/home/srussell/dev/r/r-programming-udemy/section06")
dir()
# load dataset
data <- read.csv("Section6-Homework-Data.csv")
summary(data)
str(data)
# load ggplot2 package
library(ggplot2)
# create selected data frame with corrected names
movies <- data.frame(Studio=data$Studio, Genre=data$Genre, Budget.Millions=data$Budget...mill., Gross.Percent.US=data$Gross...US)
str(movies)
summary(movies)
nrow(movies) # 608
ggplot(data=movies) + geom_point(aes(x=Genre, y=Gross.Percent.US, color=Studio))
# there are 36 studios - looks like old chart might be top 6 studios
# also there are 15 genres - looks like old chart might be top 5 genres
# two ways to approach - 1) select genres/studios that match old chart, or 2) confirm hypothesis of top genres/studios
# what are the six biggest studios by number of movies?
movies$Studio
summary(movies$Studio, maxsum = 7)
studio.filter <- c("Buena Vista Studios", "WB", "Fox", "Universal", "Sony", "Paramount Pictures")
# what are the five biggest genres by number of movies?
movies$Genre
summary(movies$Genre, maxsum = 6)
genre.filter <- c("action", "animation", "comedy", "drama", "adventure")
# install and load dplyr package - manipulating data in dataframes
install.packages("dplyr")
library(dplyr)
?filter
# subset the movies dataframe by studio and genre filters
movies <- filter(movies, movies$Studio %in% studio.filter & movies$Genre %in% genre.filter)
str(movies)
summary(movies)
nrow(movies) # 423
# plot now shows correct data subset
ggplot(data=movies) + geom_point(aes(x=Genre, y=Gross.Percent.US, color=Studio))
# add budget size to point aesthetic
ggplot(data=movies) + geom_point(aes(x=Genre, y=Gross.Percent.US, color=Studio, size=Budget.Millions))
# add boxplot aesthetic
ggplot(data=movies, aes(x=Genre, y=Gross.Percent.US)) +
geom_point(aes(color=Studio, size=Budget.Millions)) +
geom_boxplot(alpha=0.6)
# add jitter to points
ggplot(data=movies, aes(x=Genre, y=Gross.Percent.US)) +
geom_jitter(aes(color=Studio, size=Budget.Millions), alpha=0.7) +
geom_boxplot(alpha=0.5)
# add theme elements & remove boxplot outliers from view
plot <- ggplot(data=movies, aes(x=Genre, y=Gross.Percent.US)) +
geom_jitter(aes(color=Studio, size=Budget.Millions), alpha=0.7) +
geom_boxplot(alpha=0.5, outlier.color=NA) +
ylab("Gross % US") +
ggtitle("Domestic Gross % by Genre") +
theme(plot.title = element_text(hjust=0.5, size=25),
axis.title = element_text(color="Blue", size=18),
axis.text = element_text(size=12)
)
plot
# Comic Sans not available on Linux: select from install.packages("extrafont"); library(extrafont)
install.packages("extrafont")
library(extrafont)
loadfonts()
font_import(prompt=FALSE)
fonts()
plot <- ggplot(data=movies, aes(x=Genre, y=Gross.Percent.US)) +
geom_jitter(aes(color=Studio, size=Budget.Millions), alpha=0.7) +
geom_boxplot(alpha=0.5, outlier.color=NA) +
ylab("Gross % US") +
ggtitle("Domestic Gross % by Genre") +
theme(text = element_text(family="Ubuntu Mono"),
plot.title = element_text(hjust=0.5, size=25),
axis.title = element_text(color="Blue", size=18),
axis.text = element_text(size=12)
)
plot
# Adjust label of Budget legend, which is associated with sizing aesthetic
plot$labels$size = "Budget $M"
plot
ggsave("Top-Studio-Genre-Domestic-Gross.png", device="png")
